// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TpQuestionnaireManager.Data;

#nullable disable

namespace TpQuestionnaireManager.Data.Migrations
{
    [DbContext(typeof(TpQuestionnaireManagerDbContext))]
    [Migration("20250917113718_UpdateQuestionnaireRelation")]
    partial class UpdateQuestionnaireRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("QuestionnaireId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReponseCorrecteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("ReponseCorrecteId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Questionnaire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Reponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Reponse");
                });

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Question", b =>
                {
                    b.HasOne("TpQuestionnaireManager.Data.Models.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpQuestionnaireManager.Data.Models.Reponse", "ReponseCorrecte")
                        .WithMany()
                        .HasForeignKey("ReponseCorrecteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("ReponseCorrecte");
                });

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Reponse", b =>
                {
                    b.HasOne("TpQuestionnaireManager.Data.Models.Question", null)
                        .WithMany("ReponsePossible")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("TpQuestionnaireManager.Data.Models.Question", b =>
                {
                    b.Navigation("ReponsePossible");
                });
#pragma warning restore 612, 618
        }
    }
}
